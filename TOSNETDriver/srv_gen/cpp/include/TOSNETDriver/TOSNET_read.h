/* Auto-generated by genmsg_cpp for file /home/frs2012-5/fuerte_workspace/TOSNETDriver/srv/TOSNET_read.srv */
#ifndef TOSNETDRIVER_SERVICE_TOSNET_READ_H
#define TOSNETDRIVER_SERVICE_TOSNET_READ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace TOSNETDriver
{
template <class ContainerAllocator>
struct TOSNET_readRequest_ {
  typedef TOSNET_readRequest_<ContainerAllocator> Type;

  TOSNET_readRequest_()
  : reg(0)
  , word(0)
  {
  }

  TOSNET_readRequest_(const ContainerAllocator& _alloc)
  : reg(0)
  , word(0)
  {
  }

  typedef int8_t _reg_type;
  int8_t reg;

  typedef int8_t _word_type;
  int8_t word;


  typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TOSNET_readRequest
typedef  ::TOSNETDriver::TOSNET_readRequest_<std::allocator<void> > TOSNET_readRequest;

typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readRequest> TOSNET_readRequestPtr;
typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readRequest const> TOSNET_readRequestConstPtr;


template <class ContainerAllocator>
struct TOSNET_readResponse_ {
  typedef TOSNET_readResponse_<ContainerAllocator> Type;

  TOSNET_readResponse_()
  : data()
  {
  }

  TOSNET_readResponse_(const ContainerAllocator& _alloc)
  : data(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  data;


  typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TOSNET_readResponse
typedef  ::TOSNETDriver::TOSNET_readResponse_<std::allocator<void> > TOSNET_readResponse;

typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readResponse> TOSNET_readResponsePtr;
typedef boost::shared_ptr< ::TOSNETDriver::TOSNET_readResponse const> TOSNET_readResponseConstPtr;

struct TOSNET_read
{

typedef TOSNET_readRequest Request;
typedef TOSNET_readResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct TOSNET_read
} // namespace TOSNETDriver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0d3622c4effaeaaab2d0ad4f949a5480";
  }

  static const char* value(const  ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0d3622c4effaeaaaULL;
  static const uint64_t static_value2 = 0xb2d0ad4f949a5480ULL;
};

template<class ContainerAllocator>
struct DataType< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TOSNETDriver/TOSNET_readRequest";
  }

  static const char* value(const  ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 reg\n\
int8 word\n\
\n\
";
  }

  static const char* value(const  ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "992ce8a1687cec8c8bd883ec73ca41d1";
  }

  static const char* value(const  ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x992ce8a1687cec8cULL;
  static const uint64_t static_value2 = 0x8bd883ec73ca41d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TOSNETDriver/TOSNET_readResponse";
  }

  static const char* value(const  ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string data\n\
\n\
";
  }

  static const char* value(const  ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.reg);
    stream.next(m.word);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TOSNET_readRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TOSNET_readResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<TOSNETDriver::TOSNET_read> {
  static const char* value() 
  {
    return "7a1389022a43a005fc80479618997846";
  }

  static const char* value(const TOSNETDriver::TOSNET_read&) { return value(); } 
};

template<>
struct DataType<TOSNETDriver::TOSNET_read> {
  static const char* value() 
  {
    return "TOSNETDriver/TOSNET_read";
  }

  static const char* value(const TOSNETDriver::TOSNET_read&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7a1389022a43a005fc80479618997846";
  }

  static const char* value(const TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TOSNETDriver/TOSNET_read";
  }

  static const char* value(const TOSNETDriver::TOSNET_readRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7a1389022a43a005fc80479618997846";
  }

  static const char* value(const TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TOSNETDriver/TOSNET_read";
  }

  static const char* value(const TOSNETDriver::TOSNET_readResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TOSNETDRIVER_SERVICE_TOSNET_READ_H

