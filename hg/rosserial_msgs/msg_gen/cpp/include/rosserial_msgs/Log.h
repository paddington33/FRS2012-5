/* Auto-generated by genmsg_cpp for file /home/frs2012-5/fuerte_workspace/hg/rosserial_msgs/msg/Log.msg */
#ifndef ROSSERIAL_MSGS_MESSAGE_LOG_H
#define ROSSERIAL_MSGS_MESSAGE_LOG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rosserial_msgs
{
template <class ContainerAllocator>
struct Log_ {
  typedef Log_<ContainerAllocator> Type;

  Log_()
  : level(0)
  , msg()
  {
  }

  Log_(const ContainerAllocator& _alloc)
  : level(0)
  , msg(_alloc)
  {
  }

  typedef uint8_t _level_type;
  uint8_t level;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;

  enum { DEBUG = 0 };
  enum { INFO = 1 };
  enum { WARN = 2 };
  enum { ERROR = 3 };
  enum { FATAL = 4 };

  typedef boost::shared_ptr< ::rosserial_msgs::Log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosserial_msgs::Log_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Log
typedef  ::rosserial_msgs::Log_<std::allocator<void> > Log;

typedef boost::shared_ptr< ::rosserial_msgs::Log> LogPtr;
typedef boost::shared_ptr< ::rosserial_msgs::Log const> LogConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rosserial_msgs::Log_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rosserial_msgs::Log_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rosserial_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosserial_msgs::Log_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosserial_msgs::Log_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosserial_msgs::Log_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7170d5aec999754ba0d9f762bf49b913";
  }

  static const char* value(const  ::rosserial_msgs::Log_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7170d5aec999754bULL;
  static const uint64_t static_value2 = 0xa0d9f762bf49b913ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosserial_msgs::Log_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosserial_msgs/Log";
  }

  static const char* value(const  ::rosserial_msgs::Log_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosserial_msgs::Log_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
#ROS Logging Levels\n\
uint8 DEBUG=0\n\
uint8 INFO=1\n\
uint8 WARN=2\n\
uint8 ERROR=3\n\
uint8 FATAL=4\n\
\n\
uint8 level\n\
string msg\n\
\n\
";
  }

  static const char* value(const  ::rosserial_msgs::Log_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosserial_msgs::Log_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.level);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Log_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosserial_msgs::Log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rosserial_msgs::Log_<ContainerAllocator> & v) 
  {
    s << indent << "level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.level);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSSERIAL_MSGS_MESSAGE_LOG_H

